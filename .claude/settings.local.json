{
  "permissions": {
    "allow": [
      "Bash(python3:*)",
      "Bash(python test:*)",
      "Bash(python -m pytest tests/test_jqpy/test_traversal.py::test_wildcard_dict_access -v -s)",
      "Bash(python:*)",
      "Bash(uv run pytest:*)",
      "Bash(cat:*)",
      "Bash(/usr/bin/python3:*)",
      "Bash(ls:*)",
      "Bash(uv:*)",
      "Bash(chmod:*)",
      "Bash(./run_test.sh)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_core.py -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_core.py::test_wildcard -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_core.py::test_slurp -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_core.py::test_various_expressions -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_core.py::test_array_splat_with_object -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_core.py::test_comparison_operators -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/ -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/ -v --tb=short)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::TestJQPYCLI::test_slurp_option -v -s)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::TestJQPYCLI::test_wildcard -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::test_jq_compatibility -v)",
      "Bash(PYTHONPATH=. uv run python -m jqpy.cli -n \"42\")",
      "Bash(PYTHONPATH=. uv run python -c \"\nfrom src.jqpy import get_path\nresult = list(get_path(None, ''42''))\nprint(''Result:'', result)\n\")",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::TestJQPYCLI::test_array_indexing -v -s)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py -v --tb=line)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::TestJQPYCLI::test_array_indexing -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py -v)",
      "Bash(PYTHONPATH=. uv run python src/jqpy/cli_simple.py -n '42')",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::TestJQPYCLI::test_wildcard -v -s)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::TestJQPYCLI::test_slurp_option -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::TestJQPYCLI::test_basic_identity -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::TestJQPYCLI::test_null_input -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_core.py::test_null_input -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::TestJQPYCLI::test_exit_status -v)",
      "Bash(PYTHONPATH=. uv run python -c \"\nfrom src.jqpy.traverse import traverse  \nfrom src.jqpy.parser import parse_path\npath_components = parse_path(''42'')\nprint(''Path components:'', path_components)\nprint(''Component value:'', path_components[0].value)\nprint(''Starts with LITERAL?'', path_components[0].value.startswith(''LITERAL:''))\nresult = list(traverse(None, path_components))\nprint(''Result:'', result)\n\")",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_core.py::test_null_input -v -s)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_core.py::test_exit_status -v -s)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/ -v --tb=line)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_delete_path.py -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_delete_path.py -v --tb=short)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_delete_path.py::TestDeletePath::test_delete_nonexistent_key_error -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_delete_path.py::TestDeletePath::test_delete_out_of_bounds_error -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_delete_path.py::TestDeletePathEdgeCases::test_delete_type_mismatch_error -v)",
      "Bash(PYTHONPATH=. uv run python3 -c \"\nfrom src.jqpy import delete_path_simple\ntry:\n    result = delete_path_simple({''a'': 1, ''b'': 2}, ''.c'')\n    print(''No error raised! Result:'', result)\nexcept Exception as e:\n    print(''Error:'', type(e), e)\n\")",
      "Bash(PYTHONPATH=. uv run python3 -c \"\nfrom src.jqpy import delete_path_simple\ntry:\n    result = delete_path_simple({''a'': 1, ''b'': 2}, ''.c'')\n    print(''No error raised! Result:'', result)\nexcept Exception as e:\n    print(''Error:'', type(e).__name__, str(e))\n\")",
      "Bash(PYTHONPATH=. uv run:*)",
      "Bash(rm:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(sed:*)",
      "Bash(echo:*)",
      "Bash(PYTHONPATH=. python tests/test_jqpy/test_core_path_aware.py)",
      "Bash(PYTHONPATH=. python3 tests/test_jqpy/test_core_path_aware.py)",
      "Bash(PYTHONPATH=. python3 example_path_aware_usage.py)",
      "Bash(PYTHONPATH=. python3 example_path_annotation_approaches.py)",
      "Bash(PYTHONPATH=. python3 elegant_path_annotation_demo.py)",
      "Bash(PYTHONPATH=. python3:*)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(git rm:*)",
      "Bash(curl:*)",
      "Bash(pkill:*)",
      "Bash(cp:*)",
      "WebFetch(domain:github.com)",
      "Bash(rsync:*)",
      "Bash(aws lambda get-function:*)",
      "Bash(aws logs describe-log-groups:*)",
      "Bash(aws lambda list-functions:*)",
      "Bash(aws cloudformation:*)",
      "Bash(aws apigateway get-rest-apis:*)",
      "Bash(aws logs describe-log-streams:*)",
      "Bash(aws logs get-log-events:*)",
      "WebFetch(domain:modelcontextprotocol.io)",
      "Bash(npx @modelcontextprotocol/inspector:*)",
      "Bash(open:*)",
      "Bash(sam deploy:*)",
      "Bash(sam build)",
      "Bash(git checkout:*)",
      "Bash(./scripts/validate-and-update-docs.sh:*)",
      "Bash(sam list:*)",
      "Bash(export TEST_WALLET_ADDRESS=*)",
      "Bash(./scripts/deploy.sh:*)",
      "Bash(git log:*)",
      "Bash(pip show:*)",
      "Bash(pip install:*)",
      "WebFetch(domain:spec.modelcontextprotocol.io)",
      "Bash(sam local start-api:*)",
      "WebFetch(domain:mangum.fastapiexpert.com)",
      "Bash(export TEST_WALLET_ADDRESS=tp1dw4jzxwgynexslqjlr2t3h6gckjj7c0g0l4awr)"
    ],
    "deny": []
  }
}