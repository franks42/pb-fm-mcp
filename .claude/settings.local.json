{
  "permissions": {
    "allow": [
      "Bash(python3:*)",
      "Bash(python test:*)",
      "Bash(python -m pytest tests/test_jqpy/test_traversal.py::test_wildcard_dict_access -v -s)",
      "Bash(python:*)",
      "Bash(uv run pytest:*)",
      "Bash(cat:*)",
      "Bash(/usr/bin/python3:*)",
      "Bash(ls:*)",
      "Bash(uv:*)",
      "Bash(chmod:*)",
      "Bash(./run_test.sh)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_core.py -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_core.py::test_wildcard -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_core.py::test_slurp -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_core.py::test_various_expressions -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_core.py::test_array_splat_with_object -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_core.py::test_comparison_operators -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/ -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/ -v --tb=short)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::TestJQPYCLI::test_slurp_option -v -s)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::TestJQPYCLI::test_wildcard -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::test_jq_compatibility -v)",
      "Bash(PYTHONPATH=. uv run python -m jqpy.cli -n \"42\")",
      "Bash(PYTHONPATH=. uv run python -c \"\nfrom src.jqpy import get_path\nresult = list(get_path(None, ''42''))\nprint(''Result:'', result)\n\")",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::TestJQPYCLI::test_array_indexing -v -s)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py -v --tb=line)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::TestJQPYCLI::test_array_indexing -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py -v)",
      "Bash(PYTHONPATH=. uv run python src/jqpy/cli_simple.py -n '42')",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::TestJQPYCLI::test_wildcard -v -s)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::TestJQPYCLI::test_slurp_option -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::TestJQPYCLI::test_basic_identity -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::TestJQPYCLI::test_null_input -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_core.py::test_null_input -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_cli.py::TestJQPYCLI::test_exit_status -v)",
      "Bash(PYTHONPATH=. uv run python -c \"\nfrom src.jqpy.traverse import traverse  \nfrom src.jqpy.parser import parse_path\npath_components = parse_path(''42'')\nprint(''Path components:'', path_components)\nprint(''Component value:'', path_components[0].value)\nprint(''Starts with LITERAL?'', path_components[0].value.startswith(''LITERAL:''))\nresult = list(traverse(None, path_components))\nprint(''Result:'', result)\n\")",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_core.py::test_null_input -v -s)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_core.py::test_exit_status -v -s)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/ -v --tb=line)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_delete_path.py -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_delete_path.py -v --tb=short)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_delete_path.py::TestDeletePath::test_delete_nonexistent_key_error -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_delete_path.py::TestDeletePath::test_delete_out_of_bounds_error -v)",
      "Bash(PYTHONPATH=. uv run pytest tests/test_jqpy/test_delete_path.py::TestDeletePathEdgeCases::test_delete_type_mismatch_error -v)",
      "Bash(PYTHONPATH=. uv run python3 -c \"\nfrom src.jqpy import delete_path_simple\ntry:\n    result = delete_path_simple({''a'': 1, ''b'': 2}, ''.c'')\n    print(''No error raised! Result:'', result)\nexcept Exception as e:\n    print(''Error:'', type(e), e)\n\")",
      "Bash(PYTHONPATH=. uv run python3 -c \"\nfrom src.jqpy import delete_path_simple\ntry:\n    result = delete_path_simple({''a'': 1, ''b'': 2}, ''.c'')\n    print(''No error raised! Result:'', result)\nexcept Exception as e:\n    print(''Error:'', type(e).__name__, str(e))\n\")",
      "Bash(PYTHONPATH=. uv run:*)",
      "Bash(rm:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(sed:*)",
      "Bash(echo:*)",
      "Bash(PYTHONPATH=. python tests/test_jqpy/test_core_path_aware.py)",
      "Bash(PYTHONPATH=. python3 tests/test_jqpy/test_core_path_aware.py)",
      "Bash(PYTHONPATH=. python3 example_path_aware_usage.py)",
      "Bash(PYTHONPATH=. python3 example_path_annotation_approaches.py)",
      "Bash(PYTHONPATH=. python3 elegant_path_annotation_demo.py)",
      "Bash(PYTHONPATH=. python3:*)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(git rm:*)",
      "Bash(curl:*)",
      "Bash(pkill:*)",
      "Bash(cp:*)",
      "WebFetch(domain:github.com)",
      "Bash(rsync:*)",
      "Bash(aws lambda get-function:*)",
      "Bash(aws logs describe-log-groups:*)",
      "Bash(aws lambda list-functions:*)",
      "Bash(aws cloudformation:*)",
      "Bash(aws apigateway get-rest-apis:*)",
      "Bash(aws logs describe-log-streams:*)",
      "Bash(aws logs get-log-events:*)",
      "WebFetch(domain:modelcontextprotocol.io)",
      "Bash(npx @modelcontextprotocol/inspector:*)",
      "Bash(open:*)",
      "Bash(sam deploy:*)",
      "Bash(sam build)",
      "Bash(git checkout:*)",
      "Bash(./scripts/validate-and-update-docs.sh:*)",
      "Bash(sam list:*)",
      "Bash(export TEST_WALLET_ADDRESS=*)",
      "Bash(./scripts/deploy.sh:*)",
      "Bash(git log:*)",
      "Bash(pip show:*)",
      "Bash(pip install:*)",
      "WebFetch(domain:spec.modelcontextprotocol.io)",
      "Bash(sam local start-api:*)",
      "WebFetch(domain:mangum.fastapiexpert.com)",
      "Bash(export TEST_WALLET_ADDRESS=tp1dw4jzxwgynexslqjlr2t3h6gckjj7c0g0l4awr)",
      "Bash(docker build:*)",
      "Bash(./scripts/test-container-local.sh:*)",
      "Bash(docker stop:*)",
      "Bash(docker rm:*)",
      "Bash(docker logs:*)",
      "Bash(docker run:*)",
      "Bash(export TEST_WALLET_ADDRESS=pb1c9rqwfefggk3s3y79rh8quwvp8rf8ayr7qvmk8)",
      "Bash(TEST_WALLET_ADDRESS=pb1c9rqwfefggk3s3y79rh8quwvp8rf8ayr7qvmk8 uv run python scripts/test_equivalence.py)",
      "Bash(./scripts/build-container.sh:*)",
      "Bash(./scripts/deploy-container.sh:*)",
      "Bash(aws ecr describe-repositories:*)",
      "Bash(aws iam list-attached-user-policies:*)",
      "Bash(TEST_WALLET_ADDRESS=$TEST_WALLET_ADDRESS uv run python scripts/test_equivalence.py)",
      "Bash(TEST_WALLET_ADDRESS=pb1c9rqwfefggk3s3y79rh8quwvp8rf8ayr7qvmk8 REST_BASE_URL=https://897prkx7w6.execute-api.us-west-1.amazonaws.com uv run python scripts/test_equivalence.py)",
      "Bash(time curl:*)",
      "Bash(sam build:*)",
      "Bash(zip:*)",
      "Bash(sam package:*)",
      "Bash(docker:*)",
      "Bash(export TEST_WALLET_ADDRESS=\"pb1c9rqwfefggk3s3y79rh8quwvp8rf8ayr7qvmk8\")",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(export TEST_VAR=\"hello world\")",
      "Bash(env:*)",
      "Bash(diff:*)",
      "Bash(true)",
      "Bash(sam:*)",
      "Bash(aws route53 list-hosted-zones:*)",
      "Bash(./scripts/deploy-with-custom-domain.sh:*)",
      "Bash(aws acm request-certificate:*)",
      "Bash(aws acm describe-certificate:*)",
      "Bash(aws logs tail:*)",
      "WebFetch(domain:7fucgrbd16.execute-api.us-west-1.amazonaws.com)",
      "Bash(PYTHONPATH=src uv run python -c \"\nimport os\nos.environ[''DASHBOARDS_TABLE''] = ''test-table''\ntry:\n    from functions import dynamic_visualization\n    print(''✅ dynamic_visualization imported successfully'')\n    print(''Available functions:'', [name for name in dir(dynamic_visualization) if ''update'' in name or ''config'' in name])\nexcept Exception as e:\n    print(f''❌ Import error: {e}'')\n\")",
      "Bash(TEST_WALLET_ADDRESS=pb1c9rqwfefggk3s3y79rh8quwvp8rf8ayr7qvmk8 uv run python scripts/mcp_test_client.py --mcp-url https://7fucgrbd16.execute-api.us-west-1.amazonaws.com/v1/mcp --test)",
      "Bash(aws lambda list-tags:*)",
      "Bash(TZ=UTC git log --since=\"2025-07-26 05:32:02\" --oneline)",
      "Bash(git restore:*)",
      "Bash(git tag:*)",
      "Bash(TEST_WALLET_ADDRESS=\"pb1c9rqwfefggk3s3y79rh8quwvp8rf8ayr7qvmk8\" uv run python scripts/test_function_coverage.py --mcp-url https://7fucgrbd16.execute-api.us-west-1.amazonaws.com/v1/mcp --rest-url https://7fucgrbd16.execute-api.us-west-1.amazonaws.com/v1)",
      "Bash(PYTHONPATH=/Users/franksiebenlist/Development/pb-fm-mcp/src uv run python scripts/test_function_coverage.py --help)",
      "Bash(./clean.sh)",
      "Bash(TEST_WALLET_ADDRESS=\"pb1c9rqwfefggk3s3y79rh8quwvp8rf8ayr7qvmk8\" timeout 120 uv run python scripts/test_function_coverage.py --mcp-url https://7fucgrbd16.execute-api.us-west-1.amazonaws.com/v1/mcp --rest-url https://7fucgrbd16.execute-api.us-west-1.amazonaws.com/v1)",
      "Bash(TEST_WALLET_ADDRESS=\"pb1c9rqwfefggk3s3y79rh8quwvp8rf8ayr7qvmk8\" uv run python scripts/identify_failures.py)",
      "Bash(TEST_WALLET_ADDRESS=\"pb1c9rqwfefggk3s3y79rh8quwvp8rf8ayr7qvmk8\" uv run python scripts/test_function_coverage.py --mcp-url https://pb-fm-mcp-dev.creativeapptitude.com/mcp --rest-url https://pb-fm-mcp-dev.creativeapptitude.com)",
      "Bash(TEST_WALLET_ADDRESS=\"pb1c9rqwfefggk3s3y79rh8quwvp8rf8ayr7qvmk8\" timeout 60 uv run python scripts/test_function_coverage.py --mcp-url https://pb-fm-mcp-dev.creativeapptitude.com/mcp --rest-url https://pb-fm-mcp-dev.creativeapptitude.com)",
      "Bash(TEST_WALLET_ADDRESS=\"pb1c9rqwfefggk3s3y79rh8quwvp8rf8ayr7qvmk8\" uv run python scripts/mcp_test_client.py --mcp-url https://pb-fm-mcp-dev.creativeapptitude.com/mcp --test-connection-only)",
      "Bash(TEST_WALLET_ADDRESS=\"pb1sdxcqjz6exwxps8j00t8mvsf7j6x6x6s5pzrk5\" uv run python scripts/test_function_coverage.py --mcp-url https://pb-fm-mcp-dev.creativeapptitude.com/mcp --rest-url https://pb-fm-mcp-dev.creativeapptitude.com)",
      "Bash(kill:*)",
      "Bash(git fetch:*)",
      "Bash(awk:*)",
      "Bash(PYTHONPATH=src uv run python -c \"\nfrom functions.webpage_session_management import webpage_create_session, webpage_get_session_status\nfrom functions.webpage_s3_helpers import webpage_store_content\nfrom functions.webpage_queue_management import webpage_send_to_all_browsers\nfrom functions.webpage_orchestration import webpage_update_hash_price_display, webpage_create_new_session\nprint(''✅ All webpage functions imported successfully!'')\nprint(''Functions available:'')\nprint(''  - webpage_create_session'')\nprint(''  - webpage_get_session_status'') \nprint(''  - webpage_store_content'')\nprint(''  - webpage_send_to_all_browsers'')\nprint(''  - webpage_update_hash_price_display'')\nprint(''  - webpage_create_new_session'')\n\")",
      "Bash(PYTHONPATH=src uv run python -c \"\nfrom registry import get_all_functions\nfunctions = get_all_functions()\nwebpage_functions = [f for f in functions.keys() if f.startswith(''webpage_'')]\nprint(f''✅ Registry found {len(webpage_functions)} webpage functions:'')\nfor func in sorted(webpage_functions):\n    print(f''  - {func}'')\n\")",
      "Bash(PYTHONPATH=src uv run python -c \"\nimport registry\nprint(''Available registry functions:'')\nprint([attr for attr in dir(registry) if not attr.startswith(''_'')])\n\")",
      "Bash(PYTHONPATH=src uv run python -c \"\nfrom registry import get_registry\nregistry_instance = get_registry()\nwebpage_functions = [f for f in registry_instance.functions.keys() if f.startswith(''webpage_'')]\nprint(f''✅ Registry found {len(webpage_functions)} webpage functions:'')\nfor func in sorted(webpage_functions):\n    print(f''  - {func}'')\n\")",
      "Bash(PYTHONPATH=src uv run python -c \"\nfrom registry import get_registry\nregistry_instance = get_registry()\nwebpage_functions = [f for f in registry_instance._functions.keys() if f.startswith(''webpage_'')]\nprint(f''✅ Registry found {len(webpage_functions)} webpage functions:'')\nfor func in sorted(webpage_functions):\n    print(f''  - {func}'')\n\")",
      "Bash(PYTHONPATH=src uv run python -c \"\n# Import all webpage modules to register them\nimport functions.webpage_session_management\nimport functions.webpage_s3_helpers\nimport functions.webpage_queue_management\nimport functions.webpage_orchestration\n\nfrom registry import get_registry\nregistry_instance = get_registry()\nwebpage_functions = [f for f in registry_instance._functions.keys() if f.startswith(''webpage_'')]\nprint(f''✅ Registry found {len(webpage_functions)} webpage functions:'')\nfor func in sorted(webpage_functions):\n    print(f''  - {func}'')\n\")",
      "Bash(aws lambda update-function-code:*)",
      "Bash(aws lambda update-function-configuration:*)",
      "Bash(aws lambda invoke:*)",
      "Bash(/dev/null)",
      "Bash(PYTHONPATH=src uv run python -c \"\ntry:\n    from functions.sqs_traffic_light import wait_for_user_input\n    print(''✅ sqs_traffic_light imports successfully'')\n    print(f''wait_for_user_input function: {wait_for_user_input}'')\nexcept Exception as e:\n    print(f''❌ Failed to import sqs_traffic_light: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(PYTHONPATH=src uv run python -c \"\ntry:\n    from functions.sqs_traffic_light import wait_for_user_input\n    print(''✅ sqs_traffic_light imports successfully'')\nexcept Exception as e:\n    print(f''❌ Failed to import sqs_traffic_light: {e}'')\n\")",
      "Bash(PYTHONPATH=src uv run python -c \"\nfrom registry import get_registry\nregistry = get_registry()\n\n# Count total and MCP functions\nall_functions = registry.get_all_functions()\nmcp_functions = registry.get_mcp_functions()\n\nprint(f''Total functions: {len(all_functions)}'')\nprint(f''MCP functions: {len(mcp_functions)}'')\n\n# Check if our fixed functions are now in the registry\nsqs_functions = [f for f in all_functions if ''traffic_light'' in f.name or ''ai_terminal'' in f.name]\nprint(f''Traffic light and AI terminal functions: {len(sqs_functions)}'')\nfor func in sqs_functions:\n    print(f''  - {func.name}: {func.protocols} - {func.description or \"\"No description\"\"}'')\n\")",
      "Bash(PYTHONPATH=src uv run python -c \"\ntry:\n    from functions.declarative_dashboard import declare_dashboard_layout\n    print(''✅ declarative_dashboard imports successfully'')\nexcept Exception as e:\n    print(f''❌ Failed to import declarative_dashboard: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(PYTHONPATH=src uv run python -c \"\ntry:\n    from functions.declarative_dashboard import declare_dashboard_layout\n    print(''✅ declarative_dashboard imports successfully'')\nexcept Exception as e:\n    print(f''❌ Failed to import declarative_dashboard: {e}'')\n\")",
      "Bash(aws s3api get-bucket-policy:*)",
      "Bash(aws s3api head-bucket:*)",
      "Bash(aws s3api get-public-access-block:*)",
      "Bash(aws s3api get-bucket-location:*)",
      "Bash(aws s3api get-bucket-public-access-block:*)",
      "Bash(aws s3api get-bucket-ownership-controls:*)",
      "Bash(aws iam get-user:*)",
      "Bash(for file in src/functions/*.py)",
      "Bash(do)",
      "Bash(if ! uv run python -m py_compile \"$file\")",
      "Bash(then)",
      "Bash(else)",
      "Bash(fi)",
      "Bash(done)",
      "Bash(aws s3 cp:*)",
      "Bash(PYTHONPATH=/Users/franksiebenlist/Development/pb-fm-mcp/src uv run python -c \"import functions; print(''✅ All function modules imported successfully'')\")",
      "Bash(PYTHONPATH=/Users/franksiebenlist/Development/pb-fm-mcp/src uv run python -c \"\nimport functions\nprint(''''Functions imported - checking which had errors...'''')\n\")",
      "Bash(PYTHONPATH=/Users/franksiebenlist/Development/pb-fm-mcp/src uv run python -c \"\nimport functions\nprint(''''Functions imported - checking which had errors...'''')\n\")",
      "Bash(PYTHONPATH=/Users/franksiebenlist/Development/pb-fm-mcp/src uv run python -c \"\nimport functions\nprint(''✅ All function modules imported successfully - no missing descriptions!'')\n\")",
      "Bash(TEST_WALLET_ADDRESS=pb1mjtshzl0p9w7xztfawg7z86k7m02d8zznp3t6q7l uv run python scripts/test_function_coverage.py --mcp-url \"https://pb-fm-mcp-dev.creativeapptitude.com/mcp\" --rest-url \"https://pb-fm-mcp-dev.creativeapptitude.com\" --validate-only)",
      "Bash(TEST_WALLET_ADDRESS=pb1mjtshzl0p9w7xztfawg7z86k7m02d8zznp3t6q7l uv run python scripts/test_function_coverage.py --mcp-url \"https://pb-fm-mcp-dev.creativeapptitude.com/mcp\" --rest-url \"https://pb-fm-mcp-dev.creativeapptitude.com\" --env dev)",
      "Bash(PYTHONPATH=/Users/franksiebenlist/Development/pb-fm-mcp/src uv run python -c \"\nimport functions\nprint(''''Import test complete'''')\n\")",
      "WebFetch(domain:pb-fm-mcp-dev.creativeapptitude.com)",
      "Bash(./deploy.sh:*)"
    ],
    "deny": []
  }
}