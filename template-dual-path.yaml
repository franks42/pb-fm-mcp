AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: pb-fm-mcp - Dual-path MCP + REST Server (MCP direct, REST via Web Adapter)

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment name (dev or prod)
  
  DomainName:
    Type: String
    Default: creativeapptitude.com
    Description: Base domain name for custom domain
  
  HostedZoneId:
    Type: String
    Description: Route 53 Hosted Zone ID for creativeapptitude.com (e.g., Z1234567890ABC)
    Default: ""
    
  CertificateArn:
    Type: String
    Description: ARN of the SSL certificate from Certificate Manager (optional - leave empty to skip custom domain)
    Default: ""
  
  ExistingWebAssetsBucket:
    Type: String
    Description: Name of existing S3 bucket for web assets (optional - leave empty to create new)
    Default: ""
  
  ExistingScreenshotsBucket:
    Type: String
    Description: Name of existing S3 bucket for screenshots (optional - leave empty to create new)
    Default: ""

Conditions:
  IsProduction: !Equals [!Ref Environment, prod]
  HasCustomDomain: !Not [!Equals [!Ref CertificateArn, ""]]
  CreateWebAssetsBucket: !Equals [!Ref ExistingWebAssetsBucket, ""]
  CreateScreenshotsBucket: !Equals [!Ref ExistingScreenshotsBucket, ""]

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.12
  Api:
    OpenApiVersion: 3.0.1

Resources:
  MyServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Cors:
        AllowMethods: "'POST,GET,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,Accept'"
        AllowOrigin: "'*'"
        MaxAge: "'3600'"

  # MCP Function - Direct AWS Lambda handler (no Web Adapter)
  McpFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: lambda_handler_unified.lambda_handler
      Description: "MCP Server using direct AWS MCP Handler"
      Environment:
        Variables:
          LOG_LEVEL: INFO
          SESSIONS_TABLE: !Ref ConversationSessionsTable
          MESSAGES_TABLE: !Ref ConversationMessagesTable
          DASHBOARDS_TABLE: !Ref PersonalizedDashboardsTable
          SCREENSHOTS_BUCKET: !If [CreateScreenshotsBucket, !Ref ScreenshotBucket, !Ref ExistingScreenshotsBucket]
          WEB_ASSETS_BUCKET: !If [CreateWebAssetsBucket, !Ref WebAssetsBucket, !Ref ExistingWebAssetsBucket]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConversationSessionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ConversationMessagesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PersonalizedDashboardsTable
        - S3CrudPolicy:
            BucketName: !If [CreateScreenshotsBucket, !Ref ScreenshotBucket, !Ref ExistingScreenshotsBucket]
        - S3CrudPolicy:
            BucketName: !If [CreateWebAssetsBucket, !Ref WebAssetsBucket, !Ref ExistingWebAssetsBucket]
      FunctionUrlConfig:
        AuthType: NONE
        Cors:
          AllowMethods: ["GET", "POST"]
          AllowHeaders: ["Content-Type", "Authorization", "Accept"]
          AllowOrigins: ["*"]
          MaxAge: 3600
      Events:
        McpApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyServerlessApi
            Path: /mcp
            Method: ANY
    Metadata:
      BuildMethod: python3.12

  # REST Function - FastAPI via Web Adapter
  RestApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: run.sh
      Description: "REST API Server with AWS Lambda Web Adapter"
      Layers:
        - arn:aws:lambda:us-west-1:753240598075:layer:LambdaAdapterLayerX86:25
      Environment:
        Variables:
          AWS_LAMBDA_EXEC_WRAPPER: /opt/bootstrap
          PORT: 8000
          API_GATEWAY_STAGE_PATH: !If [HasCustomDomain, "", "/v1"]
          SESSIONS_TABLE: !Ref ConversationSessionsTable
          MESSAGES_TABLE: !Ref ConversationMessagesTable
          DASHBOARDS_TABLE: !Ref PersonalizedDashboardsTable
          SCREENSHOTS_BUCKET: !If [CreateScreenshotsBucket, !Ref ScreenshotBucket, !Ref ExistingScreenshotsBucket]
          WEB_ASSETS_BUCKET: !If [CreateWebAssetsBucket, !Ref WebAssetsBucket, !Ref ExistingWebAssetsBucket]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConversationSessionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ConversationMessagesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PersonalizedDashboardsTable
        - S3CrudPolicy:
            BucketName: !If [CreateScreenshotsBucket, !Ref ScreenshotBucket, !Ref ExistingScreenshotsBucket]
        - S3CrudPolicy:
            BucketName: !If [CreateWebAssetsBucket, !Ref WebAssetsBucket, !Ref ExistingWebAssetsBucket]
      Events:
        RestApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref MyServerlessApi
            Path: /
            Method: ANY
        RestApiDocs:
          Type: Api
          Properties:
            RestApiId: !Ref MyServerlessApi
            Path: /docs
            Method: ANY
        RestApiOpenApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyServerlessApi
            Path: /openapi.json
            Method: ANY
        RestApiRoutes:
          Type: Api
          Properties:
            RestApiId: !Ref MyServerlessApi
            Path: /api/{proxy+}
            Method: ANY
        RestApiHealth:
          Type: Api
          Properties:
            RestApiId: !Ref MyServerlessApi
            Path: /health
            Method: ANY
        RestApiDashboard:
          Type: Api
          Properties:
            RestApiId: !Ref MyServerlessApi
            Path: /dashboard/{proxy+}
            Method: ANY
    Metadata:
      BuildMethod: python3.12

  # Custom domain for API Gateway (only if certificate provided)
  ApiCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Condition: HasCustomDomain
    Properties:
      DomainName: !If 
        - IsProduction
        - !Sub "pb-fm-mcp.${DomainName}"
        - !Sub "pb-fm-mcp-dev.${DomainName}"
      CertificateArn: !Ref CertificateArn
      SecurityPolicy: TLS_1_2

  # Base path mapping (only if custom domain exists)
  ApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: HasCustomDomain
    Properties:
      DomainName: !Ref ApiCustomDomain
      RestApiId: !Ref MyServerlessApi
      Stage: v1

  # Route 53 record (only if custom domain exists)
  ApiDnsRecord:
    Type: AWS::Route53::RecordSet
    Condition: HasCustomDomain
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !If 
        - IsProduction
        - !Sub "pb-fm-mcp.${DomainName}"
        - !Sub "pb-fm-mcp-dev.${DomainName}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiCustomDomain.DistributionDomainName
        HostedZoneId: !GetAtt ApiCustomDomain.DistributionHostedZoneId

  # DynamoDB Tables for Conversation Storage
  ConversationSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-conversation-sessions"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: pb-fm-mcp

  ConversationMessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-conversation-messages"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
        - AttributeName: message_id
          AttributeType: S
        - AttributeName: processed_timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
        - AttributeName: message_id
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ProcessedIndex
          KeySchema:
            - AttributeName: session_id
              KeyType: HASH
            - AttributeName: processed_timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: pb-fm-mcp

  PersonalizedDashboardsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-personalized-dashboards"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: dashboard_id
          AttributeType: S
        - AttributeName: ai_session_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: dashboard_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: AISessionIndex
          KeySchema:
            - AttributeName: ai_session_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: pb-fm-mcp
        - Key: Purpose
          Value: personalized-dashboards

  # S3 Bucket for Screenshots (only create if not provided)
  ScreenshotBucket:
    Type: AWS::S3::Bucket
    Condition: CreateScreenshotsBucket
    DeletionPolicy: Retain
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldScreenshots
            Status: Enabled
            ExpirationInDays: 7  # Auto-delete after 7 days
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: pb-fm-mcp
        - Key: Purpose
          Value: screenshot-storage

  # S3 Bucket for Live Web Assets (only create if not provided)
  WebAssetsBucket:
    Type: AWS::S3::Bucket
    Condition: CreateWebAssetsBucket
    DeletionPolicy: Retain
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false  
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ["*"]
            MaxAge: 3600
      VersioningConfiguration:
        Status: Enabled  # Keep versions for rollback
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: pb-fm-mcp
        - Key: Purpose
          Value: live-web-assets

  # Bucket policy to allow public read access for web assets (only if we created bucket)
  WebAssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: CreateWebAssetsBucket
    Properties:
      Bucket: !Ref WebAssetsBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "${WebAssetsBucket}/*"


Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${MyServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/v1/"
    Export:
      Name: !Sub "${AWS::StackName}-api-url"

  McpUrl:
    Description: "MCP Protocol endpoint URL"
    Value: !Sub "https://${MyServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/v1/mcp"
    Export:
      Name: !Sub "${AWS::StackName}-mcp-url"

  OpenApiUrl:
    Description: "OpenAPI specification URL"
    Value: !Sub "https://${MyServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/v1/openapi.json"
    Export:
      Name: !Sub "${AWS::StackName}-openapi-url"

  SwaggerDocsUrl:
    Description: "Swagger UI documentation URL" 
    Value: !Sub "https://generator3.swagger.io/index.html?url=https://${MyServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/v1/openapi.json"
    Export:
      Name: !Sub "${AWS::StackName}-swagger-docs-url"

  # Stable Lambda Function URLs (don't change between deployments)
  StableMcpUrl:
    Description: "STABLE MCP Protocol endpoint URL (Lambda Function URL)"
    Value: !GetAtt McpFunctionUrl.FunctionUrl
    Export:
      Name: !Sub "${AWS::StackName}-stable-mcp-url"
      
  # Custom domain URLs (only if domain is configured)
  CustomDomainUrl:
    Condition: HasCustomDomain
    Description: "Custom domain base URL"
    Value: !If
      - IsProduction
      - !Sub "https://pb-fm-mcp.${DomainName}/"
      - !Sub "https://pb-fm-mcp-dev.${DomainName}/"
    Export:
      Name: !Sub "${AWS::StackName}-custom-domain-url"

  CustomDomainMcpUrl:
    Condition: HasCustomDomain
    Description: "Custom domain MCP endpoint"
    Value: !If
      - IsProduction
      - !Sub "https://pb-fm-mcp.${DomainName}/mcp"
      - !Sub "https://pb-fm-mcp-dev.${DomainName}/mcp"
    Export:
      Name: !Sub "${AWS::StackName}-custom-domain-mcp-url"

  EnvironmentInfo:
    Description: "Environment and URL information"
    Value: !Sub |
      Environment: ${Environment}
      Stack Name: ${AWS::StackName}
      Lambda Function URL: ${McpFunctionUrl.FunctionUrl}
      Custom Domain: !If [HasCustomDomain, !If [IsProduction, !Sub "pb-fm-mcp.${DomainName}", !Sub "pb-fm-mcp-dev.${DomainName}"], "Not configured"]
      Note: Both Lambda Function URLs and custom domains are stable

  # DynamoDB Table Information
  SessionsTableName:
    Description: "DynamoDB table name for conversation sessions"
    Value: !Ref ConversationSessionsTable
    Export:
      Name: !Sub "${AWS::StackName}-sessions-table"

  MessagesTableName:
    Description: "DynamoDB table name for conversation messages"
    Value: !Ref ConversationMessagesTable
    Export:
      Name: !Sub "${AWS::StackName}-messages-table"

  # S3 Bucket Information
  WebAssetsBucketName:
    Description: "S3 bucket name for live web assets"
    Value: !If [CreateWebAssetsBucket, !Ref WebAssetsBucket, !Ref ExistingWebAssetsBucket]
    Export:
      Name: !Sub "${AWS::StackName}-web-assets-bucket"

  WebAssetsBucketUrl:
    Description: "S3 bucket URL for live web assets"
    Value: !Sub 
      - "https://${BucketName}.s3.${AWS::Region}.amazonaws.com"
      - BucketName: !If [CreateWebAssetsBucket, !Ref WebAssetsBucket, !Ref ExistingWebAssetsBucket]
    Export:
      Name: !Sub "${AWS::StackName}-web-assets-url"